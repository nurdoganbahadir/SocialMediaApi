{
  "swagger": "2.0",
  "info": {
    "title": "Socialapi",
    "description": "Social Media API System",
    "version": "1.0.0"
  },
  "host": "http://127.0.0.1:8000",
  "basePath": "/",
  "schemes": [
    "http",
    "https"
  ],
  "securityDefinitions": {
    "Token": {
      "type": "apiKey",
      "in": "header",
      "name": "Authorization",
      "description": "Simple Token Authentication * Example: <b>Token ...tokenKey...</b>"
    },
    "Bearer": {
      "type": "apiKey",
      "in": "header",
      "name": "Authorization",
      "description": "JWT Authentication * Example: <b>Bearer ...accessToken...</b>"
    }
  },
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/auth/login": {
      "post": {
        "tags": [
          "Authentication"
        ],
        "summary": "Login",
        "description": "Login with username (or email) and password for get Token and JWT.",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "username": {
                  "type": "string",
                  "example": "test"
                },
                "password": {
                  "type": "string",
                  "example": "1234"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/auth/refresh": {
      "post": {
        "tags": [
          "Authentication"
        ],
        "summary": "JWT: Refresh",
        "description": "Refresh access-token by refresh-token.",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "bearer": {
                  "type": "object",
                  "properties": {
                    "refresh": {
                      "type": "string",
                      "example": "___refreshToken___"
                    }
                  }
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/auth/logout": {
      "post": {
        "tags": [
          "Authentication"
        ],
        "summary": "Token: Logout",
        "description": "Delete token-key.",
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/user/": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "List User",
        "description": "\r  You can send query with endpoint for search[], sort[], page and limit.\r  <ul> Examples:\r   <li>URL/?<b>search[field1]=value1&search[field2]=value2</b></li>\r   <li>URL/?<b>sort[field1]=1&sort[field2]=-1</b></li>\r   <li>URL/?<b>page=2&limit=1</b></li>\r  </ul>\r  ",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "username": {
                  "type": "string",
                  "example": "test01"
                },
                "password": {
                  "type": "string",
                  "example": "Test123?"
                },
                "email": {
                  "type": "string",
                  "example": "test@gmail.com"
                },
                "bio": {
                  "type": "string",
                  "example": "example bio description"
                },
                "birthdate": {
                  "type": "string",
                  "example": "01-01-2000"
                },
                "profileImage": {
                  "type": "string",
                  "example": "profile image url"
                }
              }
            }
          }
        ],
        "responses": {
          "default": {
            "description": ""
          }
        }
      },
      "post": {
        "tags": [
          "User"
        ],
        "summary": "Create User",
        "description": "",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "username": {
                  "type": "string",
                  "example": "test01"
                },
                "password": {
                  "type": "string",
                  "example": "Test123?"
                },
                "email": {
                  "type": "string",
                  "example": "test@gmail.com"
                },
                "bio": {
                  "type": "string",
                  "example": "example bio description"
                },
                "birthdate": {
                  "type": "string",
                  "example": "01-01-2000"
                },
                "profileImage": {
                  "type": "string",
                  "example": "profile image url"
                }
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created"
          }
        }
      }
    },
    "/user/{id}": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "Get Single User",
        "description": "",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "put": {
        "tags": [
          "User"
        ],
        "summary": "Update User",
        "description": "",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "username": {
                  "type": "string",
                  "example": "test01"
                },
                "password": {
                  "type": "string",
                  "example": "Test123?"
                },
                "email": {
                  "type": "string",
                  "example": "test@gmail.com"
                },
                "bio": {
                  "type": "string",
                  "example": "example bio description"
                },
                "birthdate": {
                  "type": "string",
                  "example": "01-01-2000"
                },
                "profileImage": {
                  "type": "string",
                  "example": "profile image url"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "delete": {
        "tags": [
          "User"
        ],
        "summary": "Delete Single User",
        "description": "",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "404": {
            "description": "Not Found"
          }
        }
      },
      "patch": {
        "tags": [
          "User"
        ],
        "summary": "Update User",
        "description": "",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "username": {
                  "type": "string",
                  "example": "test01"
                },
                "password": {
                  "type": "string",
                  "example": "Test123?"
                },
                "email": {
                  "type": "string",
                  "example": "test@gmail.com"
                },
                "bio": {
                  "type": "string",
                  "example": "example bio description"
                },
                "birthdate": {
                  "type": "string",
                  "example": "01-01-2000"
                },
                "profileImage": {
                  "type": "string",
                  "example": "profile image url"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/post/": {
      "get": {
        "tags": [
          "Post"
        ],
        "summary": "List Posts",
        "description": "\r  You can send query with endpoint for search[], sort[], page and limit.\r  <ul> Examples:\r   <li>URL/?<b>search[field1]=value1&search[field2]=value2</b></li>\r   <li>URL/?<b>sort[field1]=1&sort[field2]=-1</b></li>\r   <li>URL/?<b>page=2&limit=1</b></li>\r  </ul>\r  ",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "content": {
                  "type": "string",
                  "example": "Example Post"
                }
              }
            }
          }
        ],
        "responses": {
          "default": {
            "description": ""
          }
        }
      },
      "post": {
        "tags": [
          "Post"
        ],
        "summary": "Create Post",
        "description": "",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "content": {
                  "type": "string",
                  "example": "Example Post"
                }
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/post/{id}": {
      "get": {
        "tags": [
          "Post"
        ],
        "summary": "Get Single Post",
        "description": "",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "put": {
        "tags": [
          "Post"
        ],
        "summary": "Update Post",
        "description": "",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "content": {
                  "type": "string",
                  "example": "Example Post"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "delete": {
        "tags": [
          "Post"
        ],
        "summary": "Delete Single Post",
        "description": "",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          }
        }
      },
      "patch": {
        "tags": [
          "Post"
        ],
        "summary": "Update Post",
        "description": "",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "content": {
                  "type": "string",
                  "example": "Example Post"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/comment/": {
      "get": {
        "tags": [
          "Comments"
        ],
        "summary": "List Comments",
        "description": "\r  You can send query with endpoint for search[], sort[], page and limit.\r  <ul> Examples:\r   <li>URL/?<b>search[field1]=value1&search[field2]=value2</b></li>\r   <li>URL/?<b>sort[field1]=1&sort[field2]=-1</b></li>\r   <li>URL/?<b>page=2&limit=1</b></li>\r  </ul>\r  ",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "userId": {
                  "type": "string",
                  "example": "676b19c7af816bcb25dfc2cc"
                },
                "postId": {
                  "type": "string",
                  "example": "6769e39bd0142b31debd09fa"
                },
                "content": {
                  "type": "string",
                  "example": "example comment"
                }
              }
            }
          }
        ],
        "responses": {
          "default": {
            "description": ""
          }
        }
      },
      "post": {
        "tags": [
          "Comments"
        ],
        "summary": "Create Comment",
        "description": "",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "userId": {
                  "type": "string",
                  "example": "676b19c7af816bcb25dfc2cc"
                },
                "postId": {
                  "type": "string",
                  "example": "6769e39bd0142b31debd09fa"
                },
                "content": {
                  "type": "string",
                  "example": "example comment"
                }
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/comment/{id}": {
      "get": {
        "tags": [
          "Comments"
        ],
        "summary": "Get Single Comment",
        "description": "",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "put": {
        "tags": [
          "Comments"
        ],
        "summary": "Update Comment",
        "description": "",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "userId": {
                  "type": "string",
                  "example": "676b19c7af816bcb25dfc2cc"
                },
                "postId": {
                  "type": "string",
                  "example": "6769e39bd0142b31debd09fa"
                },
                "content": {
                  "type": "string",
                  "example": "example comment"
                }
              }
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Accepted"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "delete": {
        "tags": [
          "Comments"
        ],
        "summary": "Delete Single Comment",
        "description": "",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          }
        }
      },
      "patch": {
        "tags": [
          "Comments"
        ],
        "summary": "Update Comment",
        "description": "",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "userId": {
                  "type": "string",
                  "example": "676b19c7af816bcb25dfc2cc"
                },
                "postId": {
                  "type": "string",
                  "example": "6769e39bd0142b31debd09fa"
                },
                "content": {
                  "type": "string",
                  "example": "example comment"
                }
              }
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Accepted"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/like/": {
      "get": {
        "tags": [
          "Like"
        ],
        "summary": "List Likes",
        "description": "\r  You can send query with endpoint for search[], sort[], page and limit.\r  <ul> Examples:\r   <li>URL/?<b>search[field1]=value1&search[field2]=value2</b></li>\r   <li>URL/?<b>sort[field1]=1&sort[field2]=-1</b></li>\r   <li>URL/?<b>page=2&limit=1</b></li>\r  </ul>\r  ",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "userId": {
                  "type": "string",
                  "example": "676b19c7af816bcb25dfc2cc"
                },
                "postId": {
                  "type": "string",
                  "example": "6769e39bd0142b31debd09fa"
                }
              }
            }
          }
        ],
        "responses": {
          "default": {
            "description": ""
          }
        }
      },
      "post": {
        "tags": [
          "Like"
        ],
        "summary": "Create Likes",
        "description": "",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "userId": {
                  "type": "string",
                  "example": "676b19c7af816bcb25dfc2cc"
                },
                "postId": {
                  "type": "string",
                  "example": "6769e39bd0142b31debd09fa"
                }
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/like/{id}": {
      "get": {
        "tags": [
          "Like"
        ],
        "summary": "Get Single Like",
        "description": "",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "put": {
        "tags": [
          "Like"
        ],
        "summary": "Update Like",
        "description": "",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "userId": {
                  "type": "string",
                  "example": "676b19c7af816bcb25dfc2cc"
                },
                "postId": {
                  "type": "string",
                  "example": "6769e39bd0142b31debd09fa"
                }
              }
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Accepted"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "delete": {
        "tags": [
          "Like"
        ],
        "summary": "Delete Single Like",
        "description": "",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          }
        }
      },
      "patch": {
        "tags": [
          "Like"
        ],
        "summary": "Update Like",
        "description": "",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "userId": {
                  "type": "string",
                  "example": "676b19c7af816bcb25dfc2cc"
                },
                "postId": {
                  "type": "string",
                  "example": "6769e39bd0142b31debd09fa"
                }
              }
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Accepted"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/story/": {
      "get": {
        "tags": [
          "Story"
        ],
        "summary": "List Story",
        "description": "\r  You can send query with endpoint for search[], sort[], page and limit.\r  <ul> Examples:\r   <li>URL/?<b>search[field1]=value1&search[field2]=value2</b></li>\r   <li>URL/?<b>sort[field1]=1&sort[field2]=-1</b></li>\r   <li>URL/?<b>page=2&limit=1</b></li>\r  </ul>\r  ",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "content": {
                  "type": "string",
                  "example": "test story"
                },
                "mediaUrl": {
                  "type": "string",
                  "example": "media link"
                }
              }
            }
          }
        ],
        "responses": {
          "default": {
            "description": ""
          }
        }
      },
      "post": {
        "tags": [
          "Story"
        ],
        "summary": "Create Story",
        "description": "",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "content": {
                  "type": "string",
                  "example": "test story"
                },
                "mediaUrl": {
                  "type": "string",
                  "example": "media link"
                }
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/story/{id}": {
      "get": {
        "tags": [
          "Story"
        ],
        "summary": "Get Single Story",
        "description": "",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "put": {
        "tags": [
          "Story"
        ],
        "summary": "Update Story",
        "description": "",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "content": {
                  "type": "string",
                  "example": "test story"
                },
                "mediaUrl": {
                  "type": "string",
                  "example": "media link"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "delete": {
        "tags": [
          "Story"
        ],
        "summary": "Delete Single Story",
        "description": "",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          }
        }
      },
      "patch": {
        "tags": [
          "Story"
        ],
        "summary": "Update Story",
        "description": "",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "content": {
                  "type": "string",
                  "example": "test story"
                },
                "mediaUrl": {
                  "type": "string",
                  "example": "media link"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/follow/": {
      "get": {
        "tags": [
          "Follow"
        ],
        "summary": "List Follow",
        "description": "\r  You can send query with endpoint for search[], sort[], page and limit.\r  <ul> Examples:\r   <li>URL/?<b>search[field1]=value1&search[field2]=value2</b></li>\r   <li>URL/?<b>sort[field1]=1&sort[field2]=-1</b></li>\r   <li>URL/?<b>page=2&limit=1</b></li>\r  </ul>\r  ",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "followerId": {
                  "type": "string",
                  "example": "676b19c7af816bcb25dfc2cc"
                }
              }
            }
          }
        ],
        "responses": {
          "default": {
            "description": ""
          }
        }
      },
      "post": {
        "tags": [
          "Follow"
        ],
        "summary": "Create Follow",
        "description": "",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "followerId": {
                  "type": "string",
                  "example": "676b19c7af816bcb25dfc2cc"
                }
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created"
          }
        }
      }
    },
    "/follow/{id}": {
      "get": {
        "tags": [
          "Follow"
        ],
        "summary": "Get Single Follow",
        "description": "",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "put": {
        "tags": [
          "Follow"
        ],
        "summary": "Update Follow",
        "description": "",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "followerId": {
                  "type": "string",
                  "example": "676b19c7af816bcb25dfc2cc"
                }
              }
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Accepted"
          }
        }
      },
      "delete": {
        "tags": [
          "Follow"
        ],
        "summary": "Delete Single Follow",
        "description": "",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "followerId": {
                  "example": "any"
                }
              }
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "patch": {
        "tags": [
          "Follow"
        ],
        "summary": "Update Follow",
        "description": "",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "followerId": {
                  "type": "string",
                  "example": "676b19c7af816bcb25dfc2cc"
                }
              }
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Accepted"
          }
        }
      }
    },
    "/message/": {
      "post": {
        "tags": [
          "Message"
        ],
        "summary": "Create Message",
        "description": "If a person creates a new conversation, a conversation database will be created.",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "receiverId": {
                  "type": "string",
                  "example": "676b19c7af816bcb25dfc2cc"
                },
                "message": {
                  "type": "string",
                  "example": "message content"
                }
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/message/conversation/{conversationId}": {
      "get": {
        "tags": [
          "Conversation"
        ],
        "summary": "Get Single Conversation",
        "description": "http://127.0.0.1:8000/message/conversation/67768eba057952786db14e89",
        "parameters": [
          {
            "name": "conversationId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/message/conversation/{conversationId}/details": {
      "get": {
        "tags": [
          "Conversation"
        ],
        "summary": "Get Single Conversation Details",
        "description": "http://127.0.0.1:8000/message/conversation/67768eba057952786db14e89/details -- The relationships of the conversation in the details section are seen.",
        "parameters": [
          {
            "name": "conversationId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/notification/": {
      "get": {
        "tags": [
          "Notification"
        ],
        "summary": "List Notifications",
        "description": "",
        "responses": {
          "default": {
            "description": ""
          }
        }
      }
    }
  },
  "security": [
    {
      "Token": []
    },
    {
      "Bearer": []
    }
  ],
  "definations": {
    "User": {
      "username": {
        "required": true,
        "unique": true,
        "trim": true
      },
      "password": {
        "required": true,
        "trim": true
      },
      "email": {
        "required": true,
        "unique": true,
        "trim": true,
        "validate": [
          null,
          "Email format is not correct."
        ]
      },
      "profileImage": {},
      "bio": {},
      "birthdate": {
        "required": true
      },
      "followers": {
        "default": []
      },
      "following": {
        "default": []
      }
    },
    "Post": {
      "userId": {
        "ref": "User",
        "required": true
      },
      "content": {
        "required": true
      },
      "imageUrl": {},
      "likes": [
        {
          "ref": "Like"
        }
      ],
      "comments": [
        {
          "ref": "Comment"
        }
      ]
    },
    "Comment": {
      "postId": {
        "ref": "Post",
        "required": true
      },
      "userId": {
        "ref": "User",
        "required": true
      },
      "content": {
        "trim": true,
        "required": true
      }
    },
    "Like": {
      "userId": {
        "ref": "User",
        "required": true
      },
      "postId": {
        "ref": "Post",
        "required": true
      },
      "createdAt": {}
    },
    "Message": {
      "conversationId": {
        "ref": "Conversation",
        "required": true
      },
      "senderId": {
        "ref": "User",
        "required": true
      },
      "receiverId": {
        "ref": "User",
        "required": true
      },
      "message": {
        "required": true
      },
      "seen": {
        "default": false
      }
    },
    "Notification": {
      "userId": {
        "ref": "users",
        "required": true
      },
      "type": {
        "enum": [
          "like",
          "follow",
          "comment",
          "message"
        ],
        "required": true
      },
      "message": {
        "required": true
      },
      "read": {
        "default": false
      }
    },
    "Story": {
      "userId": {
        "ref": "User",
        "required": true
      },
      "content": {
        "required": true
      },
      "mediaUrl": {
        "required": true
      },
      "expireAt": {
        "index": {
          "expireAfterSeconds": 86400
        }
      },
      "createdAt": {}
    },
    "Follow": {
      "followingId": {
        "ref": "User",
        "required": true
      },
      "followerId": {
        "ref": "User",
        "required": true
      }
    }
  }
}